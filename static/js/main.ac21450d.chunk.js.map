{"version":3,"sources":["lib/i18n/locales/en.ts","lib/i18n/setup.ts","lib/components/ModalWizard/ModalWizard.tsx","lib/components/EmptyStateWidget/EmptyStateWidget.tsx","lib/components/ImportJavaClasses/ImportJavaClassesWizardClassListTableItems.tsx","lib/components/ImportJavaClasses/ImportJavaClassesWizardClassListTable.tsx","lib/components/ImportJavaClasses/ImportJavaClassesWizardFirstStep.tsx","lib/components/ImportJavaClasses/ImportJavaClassesWizardSecondStep.tsx","lib/components/ImportJavaClasses/ImportJavaClassesWizard.tsx","lib/components/ImportJavaClasses/ImportJavaClasses.tsx","lib/index.tsx","index.tsx"],"names":["en","en_common","modalButton","text","modalWizard","title","description","firstStep","stepName","input","placeholder","emptyState","body","secondStep","thirdStep","nextButtonText","importJavaClassesWizardI18nDefaults","locale","dictionary","importJavaClassesWizardI18nDictionaries","Map","ImportJavaClassesWizardI18nContext","React","useImportJavaClassesWizardI18n","useContext","ModalWizard","buttonText","buttonStyle","buttonIcon","buttonDisabledStatus","buttonTooltipMessage","wizardTitle","wizardDescription","wizardSteps","useState","isOpen","setOpen","handleModalToggle","useCallback","WizardButton","Button","variant","icon","onClick","isDisabled","data-testid","WizardButtonWithTooltip","Tooltip","content","isAriaDisabled","Wizard","steps","onClose","EmptyStateWidget","emptyStateIcon","emptyStateTitleHeading","emptyStateTitleSize","emptyStateTitleText","emptyStateBodyText","EmptyState","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","ImportJavaClassesWizardClassListTableItems","fullClassName","selected","onJavaClassItemSelected","itemChecked","setItemChecked","onDataListCheckChange","DataListItem","name","DataListItemRow","DataListCheck","aria-labelledby","checked","onChange","DataListCell","id","ImportJavaClassesWizardClassListTable","selectedJavaClasses","retrievedJavaClasses","classesSet","Set","DataList","aria-label","isCompact","map","value","has","ImportJavaClassesWizardFirstStep","onSelectedJavaClassesUpdated","i18n","searchValue","setSearchValue","setRetrievedJavaClasses","onSearchValueChange","retrieveJavaClasses","retrieved","window","envelopeMock","lspGetClassServiceMocked","EmptyStep","CubesIcon","SearchInput","onClear","autoFocus","length","ImportJavaClassesWizardSecondStep","emptyMap","retrievedJavaClassFields","setRetrievedJavaClassFields","useEffect","forEach","className","lspGetClassFieldsServiceMocked","prevState","javaClassFieldsMap","set","loadJavaClassFields","Spinner","isSVG","diameter","TableComposable","Tbody","rowIndex","Tr","Td","split","pop","ImportJavaClassesWizard","setSelectedJavaClasses","component","add","Array","from","delete","enableNext","canJumpTo","hideBackButton","ImportJavaClasses","defaults","dictionaries","initialLocale","navigator","language","ctx","renderImportJavaClasses","selector","ReactDOM","document","getElementById","Showcase","buttonDisableStatus","setButtonDisableStatus","setButtonTooltipMessage","onSelectChange","event","target","onInputChange","bookClassFieldsList","boomClassFieldsList","render"],"mappings":"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","file":"static/js/main.ac21450d.chunk.js","sourcesContent":["/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImportJavaClassesWizardI18n } from \"..\";\nimport { en as en_common } from \"@kogito-tooling/i18n-common-dictionary\";\n\nexport const en: ImportJavaClassesWizardI18n = {\n  ...en_common,\n  modalButton: {\n    text: \"Import Java classes\",\n  },\n  modalWizard: {\n    title: \"Import Java classes\",\n    description:\n      \"It converts your Java assets to DMN types. This is a one-time import action: if the Java class get updated, you will need to reimport it\",\n    firstStep: {\n      stepName: \"Select Java classes\",\n      input: {\n        title: \"Search:\",\n        placeholder: \"Search a class name ...\",\n      },\n      emptyState: {\n        title: \"No Java classes selected\",\n        body: \"Type the Java class name or part of the name to find the one you want to import\",\n      },\n    },\n    secondStep: {\n      stepName: \"Select fields\",\n    },\n    thirdStep: {\n      stepName: \"Review\",\n      nextButtonText: \"Import\",\n    },\n  },\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useContext } from \"react\";\nimport { en } from \"./locales\";\nimport { I18nContextType } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { ImportJavaClassesWizardI18n } from \"./ImportJavaClassesWizardI18n\";\nimport { I18nDefaults, I18nDictionaries } from \"@kogito-tooling/i18n/dist/core\";\n\nexport const importJavaClassesWizardI18nDefaults: I18nDefaults<ImportJavaClassesWizardI18n> = {\n  locale: \"en\",\n  dictionary: en,\n};\nexport const importJavaClassesWizardI18nDictionaries: I18nDictionaries<ImportJavaClassesWizardI18n> = new Map([\n  [\"en\", en],\n]);\nexport const ImportJavaClassesWizardI18nContext = React.createContext<I18nContextType<ImportJavaClassesWizardI18n>>(\n  {} as never\n);\n\nexport function useImportJavaClassesWizardI18n(): I18nContextType<ImportJavaClassesWizardI18n> {\n  return useContext(ImportJavaClassesWizardI18nContext);\n}\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useState, useCallback } from \"react\";\nimport { Button, Tooltip, Wizard, WizardStep } from \"@patternfly/react-core\";\n\nexport interface ModalWizardProps {\n  /** Text to apply to the Modal button */\n  buttonText: string;\n  /** Style to apply to the Modal button */\n  buttonStyle: \"primary\" | \"secondary\" | \"tertiary\" | \"danger\" | \"warning\" | \"link\" | \"plain\" | \"control\";\n  /** Icon to apply to the Modal button */\n  buttonIcon?: React.ReactNode;\n  /** Button disabled status */\n  buttonDisabledStatus: boolean;\n  /** Button tooltip message */\n  buttonTooltipMessage?: string;\n  /** Title of the Modal Wizard */\n  wizardTitle: string;\n  /** Title of the Modal Wizard */\n  wizardDescription: string;\n  /** Steps of the Modal Wizard */\n  wizardSteps: WizardStep[];\n}\n\nexport const ModalWizard: React.FunctionComponent<ModalWizardProps> = ({\n  buttonText,\n  buttonStyle,\n  buttonIcon,\n  buttonDisabledStatus,\n  buttonTooltipMessage,\n  wizardTitle,\n  wizardDescription,\n  wizardSteps,\n}: ModalWizardProps) => {\n  const [isOpen, setOpen] = useState(false);\n  const handleModalToggle = useCallback(() => setOpen(!isOpen), [isOpen]);\n  const WizardButton: React.FunctionComponent = () => {\n    return (\n      <Button\n        variant={buttonStyle}\n        icon={buttonIcon}\n        onClick={handleModalToggle}\n        isDisabled={buttonDisabledStatus}\n        data-testid={\"modal-wizard-button\"}\n      >\n        {buttonText}\n      </Button>\n    );\n  };\n  const WizardButtonWithTooltip: React.FunctionComponent = () => {\n    return (\n      <Tooltip content={buttonTooltipMessage}>\n        <Button\n          variant={buttonStyle}\n          icon={buttonIcon}\n          onClick={handleModalToggle}\n          isAriaDisabled={buttonDisabledStatus}\n          data-testid={\"modal-wizard-button\"}\n        >\n          {buttonText}\n        </Button>\n      </Tooltip>\n    );\n  };\n\n  return (\n    <>\n      {buttonTooltipMessage ? <WizardButtonWithTooltip /> : <WizardButton />}\n      <Wizard\n        title={wizardTitle}\n        description={wizardDescription}\n        steps={wizardSteps}\n        onClose={handleModalToggle}\n        isOpen={isOpen}\n      />\n    </>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, Title } from \"@patternfly/react-core\";\n\nexport interface EmptyStateWidgetProps {\n  /** Icon applied in the center of the Empty State Widget */\n  emptyStateIcon: React.ComponentType;\n  /** Empty State Widget title heading */\n  emptyStateTitleHeading: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n  /** Empty State Widget title size */\n  emptyStateTitleSize?: \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"4xl\";\n  /** Empty State Widget title text */\n  emptyStateTitleText: string;\n  /** Empty State Widget body text */\n  emptyStateBodyText: string;\n}\n\nexport const EmptyStateWidget: React.FunctionComponent<EmptyStateWidgetProps> = ({\n  emptyStateIcon,\n  emptyStateTitleHeading,\n  emptyStateTitleSize,\n  emptyStateTitleText,\n  emptyStateBodyText,\n}: EmptyStateWidgetProps) => {\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={emptyStateIcon} />\n      <Title headingLevel={emptyStateTitleHeading} size={emptyStateTitleSize}>\n        {emptyStateTitleText}\n      </Title>\n      <EmptyStateBody>{emptyStateBodyText}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { DataListCell, DataListCheck, DataListItem, DataListItemRow } from \"@patternfly/react-core\";\nimport { useCallback, useState } from \"react\";\n\nexport interface ImportJavaClassesWizardClassListTableItemsProps {\n  /** Item class name */\n  fullClassName: string;\n  /** Item checkbox status */\n  selected: boolean;\n  /** Function to call when an item related checkbox is pressed by the user */\n  onJavaClassItemSelected: (fullClassName: string, add: boolean) => void;\n}\n\nexport const ImportJavaClassesWizardClassListTableItems: React.FunctionComponent<ImportJavaClassesWizardClassListTableItemsProps> =\n  ({ fullClassName, selected, onJavaClassItemSelected }: ImportJavaClassesWizardClassListTableItemsProps) => {\n    const [itemChecked, setItemChecked] = useState(selected);\n    const onDataListCheckChange = useCallback(() => {\n      onJavaClassItemSelected(fullClassName, !itemChecked);\n      setItemChecked(!itemChecked);\n    }, [fullClassName, itemChecked, onJavaClassItemSelected]);\n\n    return (\n      <DataListItem name={fullClassName}>\n        <DataListItemRow>\n          <DataListCheck aria-labelledby={fullClassName} checked={itemChecked} onChange={onDataListCheckChange} />\n          <DataListCell>\n            <span id={fullClassName}>{fullClassName}</span>\n          </DataListCell>\n        </DataListItemRow>\n      </DataListItem>\n    );\n  };\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { DataList } from \"@patternfly/react-core\";\nimport { ImportJavaClassesWizardClassListTableItems } from \"./ImportJavaClassesWizardClassListTableItems\";\n\nexport interface ImportJavaClassesWizardClassListTableProps {\n  /** Previously selected Java Classes from the user */\n  selectedJavaClasses: string[];\n  /** Retrieved JavaClasses from external service */\n  retrievedJavaClasses: string[];\n  /** Function to call when an item related checkbox is pressed by the user */\n  onJavaClassItemSelected: (fullClassName: string, add: boolean) => void;\n}\n\nexport const ImportJavaClassesWizardClassListTable: React.FunctionComponent<ImportJavaClassesWizardClassListTableProps> =\n  ({\n    selectedJavaClasses,\n    retrievedJavaClasses,\n    onJavaClassItemSelected,\n  }: ImportJavaClassesWizardClassListTableProps) => {\n    const classesSet = new Set(selectedJavaClasses);\n    return (\n      <DataList aria-label={\"class-data-list\"} isCompact>\n        {selectedJavaClasses.map((value) => (\n          <ImportJavaClassesWizardClassListTableItems\n            key={value}\n            fullClassName={value}\n            selected={true}\n            onJavaClassItemSelected={onJavaClassItemSelected}\n          />\n        ))}\n        {retrievedJavaClasses.map((value) => {\n          if (!classesSet.has(value)) {\n            return (\n              <ImportJavaClassesWizardClassListTableItems\n                key={value}\n                fullClassName={value}\n                selected={false}\n                onJavaClassItemSelected={onJavaClassItemSelected}\n              />\n            );\n          }\n        })}\n      </DataList>\n    );\n  };\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { Title, SearchInput } from \"@patternfly/react-core\";\nimport CubesIcon from \"@patternfly/react-icons/dist/js/icons/cubes-icon\";\nimport { useImportJavaClassesWizardI18n } from \"../../i18n\";\nimport { useCallback, useState } from \"react\";\nimport { EmptyStateWidget } from \"../EmptyStateWidget\";\nimport { ImportJavaClassesWizardClassListTable } from \"./ImportJavaClassesWizardClassListTable\";\n\nexport interface ImportJavaClassesWizardFirstStepProps {\n  /** List of the selected classes by user */\n  selectedJavaClasses: string[];\n  /** Function to be called when selecting a Java Class */\n  onSelectedJavaClassesUpdated: (fullClassName: string, add: boolean) => void;\n}\n\nexport const ImportJavaClassesWizardFirstStep: React.FunctionComponent<ImportJavaClassesWizardFirstStepProps> = ({\n  selectedJavaClasses,\n  onSelectedJavaClassesUpdated,\n}) => {\n  const EMPTY_SEARCH_VALUE = \"\";\n  const { i18n } = useImportJavaClassesWizardI18n();\n  const [searchValue, setSearchValue] = useState(EMPTY_SEARCH_VALUE);\n  const [retrievedJavaClasses, setRetrievedJavaClasses] = useState<string[]>([]);\n  const onSearchValueChange = useCallback((value: string) => retrieveJavaClasses(value), []);\n  /* This function temporary mocks a call to the LSP service method getClasses */\n  const retrieveJavaClasses = (value: string) => {\n    setSearchValue(value);\n    const retrieved = window.envelopeMock.lspGetClassServiceMocked(value);\n    if (retrieved) {\n      setRetrievedJavaClasses(retrieved);\n    }\n  };\n\n  const EmptyStep: React.FunctionComponent = () => {\n    return (\n      <EmptyStateWidget\n        emptyStateIcon={CubesIcon}\n        emptyStateTitleHeading={\"h6\"}\n        emptyStateTitleSize={\"md\"}\n        emptyStateTitleText={i18n.modalWizard.firstStep.emptyState.title}\n        emptyStateBodyText={i18n.modalWizard.firstStep.emptyState.body}\n      />\n    );\n  };\n\n  return (\n    <>\n      <SearchInput\n        placeholder={i18n.modalWizard.firstStep.input.placeholder}\n        value={searchValue}\n        onChange={onSearchValueChange}\n        onClear={() => onSearchValueChange(EMPTY_SEARCH_VALUE)}\n        autoFocus\n      />\n      {retrievedJavaClasses.length > 0 || selectedJavaClasses.length > 0 ? (\n        <ImportJavaClassesWizardClassListTable\n          selectedJavaClasses={selectedJavaClasses}\n          retrievedJavaClasses={retrievedJavaClasses}\n          onJavaClassItemSelected={onSelectedJavaClassesUpdated}\n        />\n      ) : (\n        <EmptyStep />\n      )}\n    </>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { Spinner } from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { TableComposable, Tbody, Td, Tr } from \"@patternfly/react-table\";\n\nexport interface ImportJavaClassesWizardSecondStepProps {\n  /** List of the selected classes by user */\n  selectedJavaClasses: string[];\n}\n\nexport const ImportJavaClassesWizardSecondStep: React.FunctionComponent<ImportJavaClassesWizardSecondStepProps> = ({\n  selectedJavaClasses,\n}) => {\n  const emptyMap = new Map<string, Map<string, string>>();\n  const [retrievedJavaClassFields, setRetrievedJavaClassFields] = useState<Map<string, Map<string, string>>>(emptyMap);\n  /* This function temporary mocks a call to the LSP service method getClasses */\n  const loadJavaClassFields = (className: string) => {\n    const retrieved = window.envelopeMock.lspGetClassFieldsServiceMocked(className);\n    if (retrieved) {\n      setRetrievedJavaClassFields((prevState) => {\n        const javaClassFieldsMap = new Map<string, Map<string, string>>(prevState);\n        javaClassFieldsMap.set(className, retrieved);\n        return javaClassFieldsMap;\n      });\n    }\n  };\n  useEffect(\n    () => selectedJavaClasses.forEach((className: string) => loadJavaClassFields(className)),\n    [selectedJavaClasses]\n  );\n\n  return (\n    <>\n      {retrievedJavaClassFields.size != selectedJavaClasses.length ? (\n        <Spinner isSVG diameter=\"80px\" />\n      ) : (\n        <TableComposable aria-label=\"field-table\" variant=\"compact\">\n          <Tbody>\n            {selectedJavaClasses.map((className, rowIndex) => (\n              <Tr key={rowIndex}>\n                <Td key={`${rowIndex}_${className}`}>{className.split(\".\").pop() + \" (\" + className + \")\"}</Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      )}\n    </>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { ModalWizard } from \"../ModalWizard\";\nimport { useImportJavaClassesWizardI18n } from \"../../i18n\";\nimport { ImportJavaClassesWizardFirstStep } from \"./ImportJavaClassesWizardFirstStep\";\nimport { ImportJavaClassesWizardSecondStep } from \"./ImportJavaClassesWizardSecondStep\";\nimport { useState } from \"react\";\n\nexport interface ImportJavaClassesWizardProps {\n  /** Button disabled status */\n  buttonDisabledStatus: boolean;\n  /** Button tooltip message */\n  buttonTooltipMessage?: string;\n}\n\nexport const ImportJavaClassesWizard: React.FunctionComponent<ImportJavaClassesWizardProps> = ({\n  buttonDisabledStatus,\n  buttonTooltipMessage,\n}: ImportJavaClassesWizardProps) => {\n  const { i18n } = useImportJavaClassesWizardI18n();\n  const [selectedJavaClasses, setSelectedJavaClasses] = useState<string[]>([]);\n  const updateSelectedClasses = (fullClassName: string, add: boolean) => {\n    if (add) {\n      const classesSet = new Set(selectedJavaClasses);\n      classesSet.add(fullClassName);\n      setSelectedJavaClasses(Array.from(classesSet));\n    } else {\n      const classesSet = new Set(selectedJavaClasses);\n      classesSet.delete(fullClassName);\n      setSelectedJavaClasses(Array.from(classesSet));\n    }\n  };\n\n  const steps = [\n    {\n      name: i18n.modalWizard.firstStep.stepName,\n      component: (\n        <ImportJavaClassesWizardFirstStep\n          selectedJavaClasses={selectedJavaClasses}\n          onSelectedJavaClassesUpdated={updateSelectedClasses}\n        />\n      ),\n      enableNext: selectedJavaClasses.length > 0,\n      canJumpTo: true,\n      hideBackButton: true,\n    },\n    {\n      name: i18n.modalWizard.secondStep.stepName,\n      component: <ImportJavaClassesWizardSecondStep selectedJavaClasses={selectedJavaClasses} />,\n      enableNext: false,\n      canJumpTo: selectedJavaClasses.length > 0,\n    },\n    {\n      name: i18n.modalWizard.thirdStep.stepName,\n      component: <p>Step 3 content</p>,\n      enableNext: false,\n      canJumpTo: false,\n    },\n  ];\n\n  return (\n    <ModalWizard\n      buttonStyle=\"secondary\"\n      buttonText={i18n.modalButton.text}\n      buttonDisabledStatus={buttonDisabledStatus}\n      buttonTooltipMessage={buttonTooltipMessage}\n      wizardTitle={i18n.modalWizard.title}\n      wizardDescription={i18n.modalWizard.description}\n      wizardSteps={steps}\n    />\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport {\n  importJavaClassesWizardI18nDictionaries,\n  ImportJavaClassesWizardI18nContext,\n  importJavaClassesWizardI18nDefaults,\n} from \"../../i18n\";\nimport { I18nDictionariesProvider } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { ImportJavaClassesWizard } from \"./ImportJavaClassesWizard\";\n\nexport interface ImportJavaClassesProps {\n  /** Button disabled status */\n  buttonDisabledStatus: boolean;\n  /** Button tooltip message */\n  buttonTooltipMessage?: string;\n}\n\nexport const ImportJavaClasses: React.FunctionComponent<ImportJavaClassesProps> = ({\n  buttonDisabledStatus,\n  buttonTooltipMessage,\n}: ImportJavaClassesProps) => {\n  return (\n    <I18nDictionariesProvider\n      defaults={importJavaClassesWizardI18nDefaults}\n      dictionaries={importJavaClassesWizardI18nDictionaries}\n      initialLocale={navigator.language}\n      ctx={ImportJavaClassesWizardI18nContext}\n    >\n      <ImportJavaClassesWizard\n        buttonDisabledStatus={buttonDisabledStatus}\n        buttonTooltipMessage={buttonTooltipMessage}\n      />\n    </I18nDictionariesProvider>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { ImportJavaClasses } from \"./components\";\n\nexport * from \"./components\";\n\nwindow.renderImportJavaClasses = (selector: string, buttonDisabledStatus: boolean, buttonTooltipMessage?: string) => {\n  ReactDOM.render(\n    <ImportJavaClasses buttonDisabledStatus={buttonDisabledStatus} buttonTooltipMessage={buttonTooltipMessage} />,\n    document.getElementById(selector)\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"@patternfly/react-core/dist/styles/base.css\";\nimport React, { useCallback, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ImportJavaClasses } from \"./lib\";\n\nconst Showcase: React.FunctionComponent = () => {\n  const LSP_SERVER_NOT_AVAILABLE = \"Java LSP Server is not available. Please install Java Extension\";\n  const [buttonDisableStatus, setButtonDisableStatus] = useState(true);\n  const [buttonTooltipMessage, setButtonTooltipMessage] = useState(LSP_SERVER_NOT_AVAILABLE);\n  const onSelectChange = useCallback((event) => setButtonDisableStatus(event.target.value === \"true\"), []);\n  const onInputChange = useCallback((event) => setButtonTooltipMessage(event.target.value), []);\n  /* This function temporary mocks a call to the LSP service method getClasses */\n  const lspGetClassServiceMocked = (value: string) => {\n    /* Mocked data retrieved from LSP Service */\n    const booClassesList = [\"org.kie.test.kogito.Book\", \"org.kie.test.kogito.Boom\"];\n    const bookClassesList = [\"org.kie.test.kogito.Book\"];\n    const boomClassesList = [\"org.kie.test.kogito.Boom\"];\n\n    /* Temporary mocks managing */\n    if (value === \"Boo\") {\n      return booClassesList;\n    } else if (value === \"Book\") {\n      return bookClassesList;\n    } else if (value === \"Boom\") {\n      return boomClassesList;\n    } else {\n      return [];\n    }\n  };\n  const lspGetClassFieldsServiceMocked = (className: string) => {\n    /* Mocked data retrieved from LSP Service */\n    const bookClassFieldsList = new Map<string, string>();\n    bookClassFieldsList.set(\"author\", \"string\");\n    bookClassFieldsList.set(\"title\", \"string\");\n    bookClassFieldsList.set(\"year\", \"integer\");\n    const boomClassFieldsList = new Map<string, string>();\n    boomClassFieldsList.set(\"time\", \"date\");\n    boomClassFieldsList.set(\"big\", \"boolean\");\n\n    /* Temporary mocks managing */\n    if (className === \"org.kie.test.kogito.Book\") {\n      return bookClassFieldsList;\n    } else if (className === \"org.kie.test.kogito.Boom\") {\n      return boomClassFieldsList;\n    } else {\n      return new Map<string, string>();\n    }\n  };\n\n  window.envelopeMock = {\n    lspGetClassServiceMocked: (value: string) => lspGetClassServiceMocked(value),\n    lspGetClassFieldsServiceMocked: (className: string) => lspGetClassFieldsServiceMocked(className),\n  };\n\n  return (\n    <div className=\"showcase\">\n      <p>\n        This showcase demonstrates how the <strong>Import Java Classes</strong> component works. Adding the component to\n        the DOM, will result to render a Button with <em>Import Java Classes</em> label. As default status, the button\n        is disabled with a tooltip reporting the reason. Using the above menu, you can modify the button status and the\n        related tooltip message.\n      </p>\n      <p>\n        To simulate the searching of a Java Classes on the Search box inside the wizard, please use values:\n        <em>Boo</em>, <em>Boom</em> or <em>Book</em> as key, which are mocked in this showcase to demonstrate the\n        component usage.\n      </p>\n      <div className=\"menu\">\n        <strong>Import Java classes button state</strong>\n        <select onChange={onSelectChange}>\n          <option value=\"true\">Disabled</option>\n          <option value=\"false\">Enabled</option>\n        </select>\n        <strong>Tooltip Message (Optional)</strong>\n        <input value={buttonTooltipMessage} onChange={onInputChange} />\n      </div>\n      <div className=\"import-java-classes\">\n        <ImportJavaClasses buttonDisabledStatus={buttonDisableStatus} buttonTooltipMessage={buttonTooltipMessage} />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Showcase />, document.getElementById(\"root\"));\n"],"sourceRoot":""}